%{
#include "types.h"
#include <ctype.h>
#include <cstdio>
#include <cstring>
#include <iostream>

int yydebug=1;
extern int yylineno,yychar;
char digit_parse[100];
unsigned digit_index=0;
extern int yylex(void);
extern int yyparse();

void yyerror(const char *str)
{
    printf("%s\nline: %d\n",str,yylineno);
}
 
int yywrap()
{
    return 1;
} 
  
main()
{
    yyparse();
} 


%}

%token PROGRAM END DECLARE INTEGER BOOLEAN CHAR LABEL REAL ARRAY OF PROCEDURE IF THEN ELSE WHILE DO UNTIL READ WRITE GOTO RETURN NOT OR MOD AND TRUE FALSE GE LE NE ASSIGN


%union{
    int number;
    char string[100];
    struct _constant_t constant_t;
    struct _op_t op_t;
}

%token <number> CHARACTER
%token <string> ID
%type <number> caractere 
%type <string> identifier
%type <number> digit
%type <string> label
%type <string> variable
%type <number> char_constant
%type <string> integer_constant
%type <number> boolean_constant
%type <constant_t> constant
%type <op_t> relop
%type <op_t> addop
%type <op_t> mulop

%right  '='
%left  '+'  '-' AND
%left  '*'  '/' OR MOD

%%
program           : PROGRAM identifier proc_body
                  {printf("program\n");};

proc_body         : block_stmt
                  {printf("proc-body\n");};

block_stmt        : DO stmt_list END
                  | DECLARE decl_list DO stmt_list END
                  {printf("block_stmt\n");};

decl_list         : 
                  | decl 
                  | decl_list ';' decl
                  {printf("decl_list\n");};

decl              : 
                  | variable_decl 
                  | proc_decl
                  {printf("decl\n");};

variable_decl     : type ident_list
                  {printf("variable_decl\n");};

ident_list        : identifier 
                  | ident_list ',' identifier
                  {printf("ident_list\n");};

type              : simple_type 
                  | array_type
                  {printf("type\n");};

simple_type       : INTEGER
                  | REAL
                  | BOOLEAN 
                  | CHAR 
                  | LABEL
                  {printf("simple_type\n");};

array_type        : ARRAY tamanho OF simple_type
                  {printf("array_type\n");};

tamanho           : integer_constant
                  {printf("tamanho\n");};

proc_decl         : proc_header block_stmt
                  {printf("proc_decl\n");};

proc_header       : PROCEDURE identifier
                  | PROCEDURE identifier '(' formal_list ')'
                  {printf("proc_header\n");};

formal_list       : parameter_decl 
                  | formal_list ';' parameter_decl
                  {printf("formal_list\n");};

parameter_decl    : parameter_type identifier
                  {printf("parameter_decl\n");};

parameter_type    : type
                  | proc_signature
                  {printf("parameter_type\n");};

proc_signature    : PROCEDURE identifier
                  | PROCEDURE identifier '(' type_list ')' 
                  {printf("proc_signature\n");};

type_list         : parameter_type
                  | type_list ',' parameter_type
                  {printf("type_list\n");};

stmt_list         : stmt 
                  | stmt_list ';' stmt
                  {printf("stmt_list\n");};

stmt              : label ':' unlabelled_stmt 
                  | unlabelled_stmt
                  {printf("stmt\n");};

label             : identifier
                  {strcpy($$,$1); printf("label\n");};

unlabelled_stmt   : assign_stmt 
                  | if_stmt    
                  | loop_stmt 
                  | read_stmt 
                  | write_stmt
                  | goto_stmt    
                  | proc_stmt 
                  | return_stmt 
                  | block_stmt
                  {printf("unlabelled_stmt\n");};

assign_stmt       : variable ASSIGN expression
                  {printf("assign_stmt\n");};

variable          : identifier {strcpy($$,$1);};
                  | array_element
                  {printf("variable\n");};

array_element     : identifier '[' expression ']'
                  {printf("array_element\n");};

if_stmt           : IF condition THEN stmt_list END
                  | IF condition THEN stmt_list ELSE stmt_list END
                  {printf("if_stmt\n");};

condition         : expression
                  {printf("condition\n");};

loop_stmt         : WHILE condition block_stmt
                  | DO stmt_list UNTIL
                  {printf("loop_stmt\n");};

read_stmt         : READ '(' ident_list ')'
                  {printf("read_stmt\n");};

write_stmt        : WRITE '(' expr_list ')'
                  {printf("write_stmt\n");};

goto_stmt         : GOTO label
                  {printf("goto_stmt\n");};

proc_stmt         : identifier 
                  | identifier '(' expr_list ')' 
                  {printf("proc_stmt\n");};

return_stmt       : RETURN
                  {printf("return_stmt\n");};

expr_list         : expression 
                  | expr_list ',' expression
                  {printf("expr_list\n");};

expression        : simple_expr 
                  | simple_expr relop simple_expr
                  {printf("expression\n");};

simple_expr       : term 
                  | simple_expr addop term
                  {printf("simple_expr\n");};

term              : factor_a 
                  | term mulop factor_a
                  {printf("term\n");};

factor_a          : factor 
                  | NOT factor 
                  | '-' factor
                  {printf("factor_a\n");};

factor            : variable 
                  | constant 
                  | '(' expression ')'
                  {printf("factor\n");};

relop             : '=' {strcpy($$.type, "assign"); printf("relop: =\n");}
                  | '<' {strcpy($$.type, "lt"); printf("relop: <\n");}
                  | LE {strcpy($$.type, "leq"); printf("relop: <=\n");}
                  | '>' {strcpy($$.type, "gt"); printf("relop: >\n");}
                  | GE {strcpy($$.type, "geq"); printf("relop: >=\n");}
                  | NE {strcpy($$.type, "neq"); printf("relop: !=\n");}
                  ;

addop             : '+' {strcpy($$.type, "add"); printf("addop: +\n");}
                  | '-' {strcpy($$.type, "sub"); printf("addop: -\n");}
                  | OR {strcpy($$.type, "or"); printf("addop: OR\n");}
                  ;

mulop             : '*' {strcpy($$.type, "mul"); printf("mulop: *\n");}
                  | '/' {strcpy($$.type, "div"); printf("mulop: /\n");}
                  | AND {strcpy($$.type, "and"); printf("mulop: AND\n");}
                  ;

constant          : integer_constant {strcpy($$.val,$1); strcpy($$.type,"integer"); printf("constant type=%s value=%s\n", $$.type, $$.val);};
                  | real_constant
                  | char_constant {$$.val[0]=$1; $$.val[1]='\0'; strcpy($$.type,"char"); printf("constant type=%s value=%s\n", $$.type, $$.val);}; 
                  | boolean_constant {$$.val[0]=$1; $$.val[1]='\0'; strcpy($$.type,"bool"); printf("constant type=%s value=%s\n", $$.type, $$.val);};

boolean_constant  : FALSE {$$='0';}
                  | TRUE
                  {$$='1'; printf("boolean_constant\n");};

integer_constant  : unsigned_integer
                  {digit_parse[digit_index] = '\0'; strcpy($$,digit_parse);
                   digit_index=0;
                   printf("integer_constant: %s\n", $$);};
                  ;

unsigned_integer  : digit {digit_parse[digit_index++] = $1; printf("single digit: %d\n", $1);};
                  | unsigned_integer digit {digit_parse[digit_index++]=$2; printf("composed digit: %d\n", $2);};
                  ;

real_constant     : unsigned_real
                  {printf("real_constant\n");};

unsigned_real     : ur_head '.' ur_tail
                  | unsigned_integer '.' unsigned_integer
                  | unsigned_integer '.' unsigned_integer scale_factor
                  {printf("unsigned_real\n");};

ur_head					  : unsigned_integer;

ur_tail           : unsigned_integer
                  | unsigned_integer scale_factor

scale_factor      : 'E' unsigned_integer
                  | 'E' '+' unsigned_integer
                  | 'E' '-' unsigned_integer
                  {printf("scale_factor\n");};
                  

char_constant     : caractere
                  {$$=$1; printf("char_constant\n");};
                  ;

identifier        : ID
                  {strcpy($$,$1);printf("identifier: %s\n",$1);};

digit             : '0' {$$='0'; printf("digit: 0\n");}  
                  | '1' {$$='1'; printf("digit: 1\n");} 
                  | '2' {$$='2'; printf("digit: 2\n");} 
                  | '3' {$$='3'; printf("digit: 3\n");} 
                  | '4' {$$='4'; printf("digit: 4\n");} 
                  | '5' {$$='5'; printf("digit: 5\n");} 
                  | '6' {$$='6'; printf("digit: 6\n");} 
                  | '7' {$$='7'; printf("digit: 7\n");} 
                  | '8' {$$='8'; printf("digit: 8\n");} 
                  | '9' {$$='9'; printf("digit: 9\n");}
                  ;

caractere         : CHARACTER 
                  {$$=$1; printf("caractere: %c\n",$1);}
                  ;

%%


